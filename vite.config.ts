import {
  copyFileSync,
  existsSync,
  readdirSync,
  readFileSync,
  writeFileSync,
} from 'node:fs';
import { resolve } from 'node:path';
import { ConfigsManager } from 'sborshik/utils';
import { defineConfig } from 'vite';

const configs = ConfigsManager.create();

const entry = Object.fromEntries(
  Object.entries(configs.pathAliasesFromTsConfig).map(([key, [value]]) => {
    const name = key.split('/').pop()!;
    const entryPath = value.startsWith('./') ? value.slice(2) : value;
    return [name, resolve(__dirname, entryPath)];
  }),
);

const alias = Object.fromEntries(
  Object.entries(configs.pathAliasesFromTsConfig).map(([key, [value]]) => {
    const entryPath = value.startsWith('./') ? value.slice(2) : value;
    return [key, resolve(__dirname, entryPath)];
  }),
);

let dtsGenerationComplete: PromiseWithResolvers<void> | undefined;
let utilityTypesComplete: PromiseWithResolvers<void> | undefined;

export default defineConfig({
  resolve: {
    alias,
  },
  build: {
    lib: {
      entry,
      formats: ['es', 'cjs'],
      fileName: (format, entryName) => {
        return format === 'es' ? `${entryName}.js` : `${entryName}.cjs`;
      },
    },
    rollupOptions: {
      external: configs.externalDeps,
      output: {
        preserveModules: false,
      },
    },
    minify: false,
    sourcemap: true,
  },
  plugins: [
    {
      name: 'dts-bundle',
      apply: 'build',
      buildStart() {
        dtsGenerationComplete = Promise.withResolvers();
      },
      async closeBundle() {
        const { rollup } = await import('rollup');
        const dts = (await import('rollup-plugin-dts')).default;

        console.log('\nüì¶ Generating bundled .d.ts files...\n');

        for (const [name, entryPath] of Object.entries(entry)) {
          try {
            const bundle = await rollup({
              input: entryPath,
              external: (id) => {
                if (id.includes('node_modules')) {
                  return true;
                }

                return configs.externalDeps.some((dep) => id.startsWith(dep));
              },
              plugins: [
                dts({
                  respectExternal: true,
                  compilerOptions: {
                    paths: configs.pathAliasesFromTsConfig,
                    baseUrl: '.',
                  },
                }),
              ],
            });

            await bundle.write({
              file: `dist/${name}.d.ts`,
              format: 'es',
            });

            await bundle.close();
            console.log(`‚úÖ ${name}.d.ts`);
          } catch (error) {
            console.error(`‚ùå Failed to generate ${name}.d.ts:`, error);
          }
        }

        console.log('\n‚úÖ All .d.ts files generated!\n');
        dtsGenerationComplete?.resolve();
      },
    },
    {
      name: 'generate-utility-types',
      apply: 'build',
      enforce: 'post',
      buildStart() {
        utilityTypesComplete = Promise.withResolvers();
      },
      async closeBundle() {
        await dtsGenerationComplete?.promise;

        try {
          console.log('\nüìù Generating utility types global file...\n');

          const utilTypesContent = readFileSync('dist/types.d.ts', {
            encoding: 'utf-8',
          }).toString();

          const processedContent = [
            '/** THIS IS AUTOGENERATED FILE FROM "utils/types.ts" */',
            utilTypesContent
              .split('\n')
              .filter((line) => !line.startsWith('export type {'))
              .join('\n')
              .replaceAll('export type', 'type'),
          ].join('\n');

          writeFileSync('dist/types.global.d.ts', processedContent);

          console.log('‚úÖ Generated types.global.d.ts\n');
        } catch (error) {
          console.error('‚ùå Failed to generate utility types:', error);
        }

        utilityTypesComplete?.resolve();
      },
    },
    {
      name: 'prepare-dist-package',
      apply: 'build',
      enforce: 'post',
      async closeBundle() {
        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
        await dtsGenerationComplete?.promise;
        await utilityTypesComplete?.promise;

        try {
          console.log('\nüì¶ Preparing package.json for dist...\n');

          // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
          const filesToCopy = ['LICENSE', 'README.md', 'package.json'];

          for (const file of filesToCopy) {
            if (existsSync(file)) {
              copyFileSync(file, `dist/${file}`);
              console.log(`üìÑ Copied ${file}`);
            } else {
              console.warn(`‚ö†Ô∏è  ${file} not found, skipping`);
            }
          }

          const distConfigs = ConfigsManager.create('./dist');

          // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ dist
          const distFiles = readdirSync('dist');

          // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –º–æ–¥—É–ª–µ–π
          const moduleNames = new Set<string>();

          distFiles.forEach((file) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .map —Ñ–∞–π–ª—ã, LICENSE, README.md, package.json
            if (
              file.endsWith('.map') ||
              file === 'LICENSE' ||
              file === 'README.md' ||
              file === 'package.json'
            ) {
              return;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–æ–¥—É–ª—è (—É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)
            let moduleName = file;

            // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            if (moduleName.endsWith('.d.ts')) {
              moduleName = moduleName.replace(/\.d\.ts$/, '');
            } else if (moduleName.endsWith('.cjs')) {
              moduleName = moduleName.replace(/\.cjs$/, '');
            } else if (moduleName.endsWith('.js')) {
              moduleName = moduleName.replace(/\.js$/, '');
            } else {
              return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –¥—Ä—É–≥–∏–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            }

            moduleNames.add(moduleName);
          });

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º exports
          const exports: Record<string, any> = {};

          for (const moduleName of Array.from(moduleNames).sort()) {
            const hasJs = existsSync(`dist/${moduleName}.js`);
            const hasCjs = existsSync(`dist/${moduleName}.cjs`);
            const hasDts = existsSync(`dist/${moduleName}.d.ts`);

            const exportEntry: any = {};

            // –í–ê–ñ–ù–û: types –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!
            if (hasDts) {
              exportEntry.types = `./${moduleName}.d.ts`;
            }

            if (hasJs) {
              exportEntry.import = `./${moduleName}.js`;
            }

            if (hasCjs) {
              exportEntry.require = `./${moduleName}.cjs`;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
            const exportPath = moduleName === 'index' ? '.' : `./${moduleName}`;
            exports[exportPath] = exportEntry;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º package.json
          distConfigs.package.exports = exports;
          distConfigs.package.files = ['*'];

          // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
          delete distConfigs.package.scripts;
          delete distConfigs.package.devDependencies;

          distConfigs.syncConfigs();

          console.log(`‚úÖ Generated exports for ${moduleNames.size} modules`);
          console.log('‚úÖ Updated dist/package.json\n');
        } catch (error) {
          console.error('‚ùå Failed to prepare dist package:', error);
        }
      },
    },
  ],
});
